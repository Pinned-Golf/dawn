{% doc %}
  @prompt
    A video block that autoplays once you land on the page. It must be muted with the customer having the option to unmute it. It also must fit on the page and do not make the margins bigger., please round the corners of the block and make the block height bigger by 25%
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-video-container-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    max-width: 100%;
    margin: 0;
    padding: 0;
    overflow: hidden;
    border-radius: {{ block.settings.border_radius }}px;
  }

  .ai-video-wrapper-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    height: {{ block.settings.video_height | times: 1.25 }}px;
    background-color: #000000;
    border-radius: {{ block.settings.border_radius }}px;
    overflow: hidden;
  }

  .ai-video-element-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
    border-radius: {{ block.settings.border_radius }}px;
  }

  .ai-video-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    border-radius: {{ block.settings.border_radius }}px;
  }

  .ai-video-placeholder-{{ ai_gen_id }} svg {
    width: 100px;
    height: 100px;
    color: #999;
  }

  .ai-video-empty-state-{{ ai_gen_id }} {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    padding: 12px 20px;
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    border-radius: 4px;
    font-size: 14px;
    text-align: center;
    pointer-events: none;
  }

  .ai-video-controls-{{ ai_gen_id }} {
    position: absolute;
    bottom: 20px;
    right: 20px;
    display: flex;
    gap: 10px;
    z-index: 10;
  }

  .ai-video-control-btn-{{ ai_gen_id }} {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    background-color: rgba(0, 0, 0, 0.7);
    border: none;
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.3s ease, transform 0.2s ease;
    backdrop-filter: blur(10px);
  }

  .ai-video-control-btn-{{ ai_gen_id }}:hover {
    background-color: rgba(0, 0, 0, 0.9);
    transform: scale(1.05);
  }

  .ai-video-control-btn-{{ ai_gen_id }}:focus {
    outline: 2px solid white;
    outline-offset: 2px;
  }

  .ai-video-control-btn-{{ ai_gen_id }} svg {
    width: 20px;
    height: 20px;
  }

  .ai-video-overlay-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      to bottom,
      rgba(0, 0, 0, 0) 0%,
      rgba(0, 0, 0, 0) 70%,
      rgba(0, 0, 0, 0.3) 100%
    );
    pointer-events: none;
    border-radius: {{ block.settings.border_radius }}px;
  }

  @media screen and (max-width: 749px) {
    .ai-video-wrapper-{{ ai_gen_id }} {
      height: {{ block.settings.video_height | times: 1.25 | times: 0.7 }}px;
    }

    .ai-video-controls-{{ ai_gen_id }} {
      bottom: 15px;
      right: 15px;
    }

    .ai-video-control-btn-{{ ai_gen_id }} {
      width: 40px;
      height: 40px;
    }

    .ai-video-control-btn-{{ ai_gen_id }} svg {
      width: 16px;
      height: 16px;
    }
  }
{% endstyle %}

<autoplay-video-{{ ai_gen_id }}
  class="ai-video-container-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-video-wrapper-{{ ai_gen_id }}">
    {% if block.settings.video_url != blank %}
      <video
        class="ai-video-element-{{ ai_gen_id }}"
        autoplay
        muted
        loop
        playsinline
        preload="metadata"
        data-video-id="{{ ai_gen_id }}"
      >
        <source src="{{ block.settings.video_url }}" type="video/mp4">
        Your browser does not support the video tag.
      </video>
      
      <div class="ai-video-overlay-{{ ai_gen_id }}"></div>
      
      <div class="ai-video-controls-{{ ai_gen_id }}">
        <button
          class="ai-video-control-btn-{{ ai_gen_id }} ai-video-mute-btn-{{ ai_gen_id }}"
          aria-label="Unmute video"
          data-muted="true"
        >
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon>
            <line x1="23" y1="9" x2="17" y2="15"></line>
            <line x1="17" y1="9" x2="23" y2="15"></line>
          </svg>
        </button>
        
        <button
          class="ai-video-control-btn-{{ ai_gen_id }} ai-video-play-btn-{{ ai_gen_id }}"
          aria-label="Pause video"
          data-playing="true"
        >
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <rect x="6" y="4" width="4" height="16"></rect>
            <rect x="14" y="4" width="4" height="16"></rect>
          </svg>
        </button>
      </div>
    {% else %}
      <div class="ai-video-placeholder-{{ ai_gen_id }}">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polygon points="23 7 16 12 23 17 23 7"></polygon>
          <rect x="1" y="5" width="15" height="14" rx="2" ry="2"></rect>
        </svg>
        <div class="ai-video-empty-state-{{ ai_gen_id }}">
          Add a video URL to get started
        </div>
      </div>
    {% endif %}
  </div>
</autoplay-video-{{ ai_gen_id }}>

<script>
  (function() {
    class AutoplayVideo{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.video = null;
        this.muteBtn = null;
        this.playBtn = null;
        this.isMuted = true;
        this.isPlaying = true;
      }

      connectedCallback() {
        this.video = this.querySelector('.ai-video-element-{{ ai_gen_id }}');
        this.muteBtn = this.querySelector('.ai-video-mute-btn-{{ ai_gen_id }}');
        this.playBtn = this.querySelector('.ai-video-play-btn-{{ ai_gen_id }}');

        if (this.video && this.muteBtn && this.playBtn) {
          this.setupEventListeners();
          this.setupIntersectionObserver();
        }
      }

      setupEventListeners() {
        this.muteBtn.addEventListener('click', () => this.toggleMute());
        this.playBtn.addEventListener('click', () => this.togglePlay());

        this.video.addEventListener('loadeddata', () => {
          this.video.muted = true;
          this.video.play().catch(e => console.log('Autoplay prevented:', e));
        });

        this.video.addEventListener('play', () => {
          this.isPlaying = true;
          this.updatePlayButton();
        });

        this.video.addEventListener('pause', () => {
          this.isPlaying = false;
          this.updatePlayButton();
        });
      }

      setupIntersectionObserver() {
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              if (this.video.paused) {
                this.video.play().catch(e => console.log('Play failed:', e));
              }
            } else {
              if (!this.video.paused) {
                this.video.pause();
              }
            }
          });
        }, { threshold: 0.5 });

        observer.observe(this);
      }

      toggleMute() {
        this.isMuted = !this.isMuted;
        this.video.muted = this.isMuted;
        this.updateMuteButton();
      }

      togglePlay() {
        if (this.isPlaying) {
          this.video.pause();
        } else {
          this.video.play().catch(e => console.log('Play failed:', e));
        }
      }

      updateMuteButton() {
        const muteIcon = this.isMuted ? 
          '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon><line x1="23" y1="9" x2="17" y2="15"></line><line x1="17" y1="9" x2="23" y2="15"></line></svg>' :
          '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon><path d="M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7.07"></path></svg>';
        
        this.muteBtn.innerHTML = muteIcon;
        this.muteBtn.setAttribute('aria-label', this.isMuted ? 'Unmute video' : 'Mute video');
        this.muteBtn.setAttribute('data-muted', this.isMuted);
      }

      updatePlayButton() {
        const playIcon = this.isPlaying ?
          '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="6" y="4" width="4" height="16"></rect><rect x="14" y="4" width="4" height="16"></rect></svg>' :
          '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polygon points="5 3 19 12 5 21 5 3"></polygon></svg>';
        
        this.playBtn.innerHTML = playIcon;
        this.playBtn.setAttribute('aria-label', this.isPlaying ? 'Pause video' : 'Play video');
        this.playBtn.setAttribute('data-playing', this.isPlaying);
      }
    }

    customElements.define('autoplay-video-{{ ai_gen_id }}', AutoplayVideo{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Autoplay video",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Video"
    },
    {
      "type": "url",
      "id": "video_url",
      "label": "Video URL",
      "info": "Upload your video file to Files in your Shopify admin, then copy the URL here"
    },
    {
      "type": "range",
      "id": "video_height",
      "min": 200,
      "max": 800,
      "step": 50,
      "unit": "px",
      "label": "Video height",
      "default": 400
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 16
    }
  ],
  "presets": [
    {
      "name": "Autoplay video"
    }
  ]
}
{% endschema %}