{% doc %}
  @prompt
    A video block that autoplays once you land on the page. It must be muted with the customer having the option to unmute it. It also must fit on the page and do not make the margins bigger. please round the corners of the block., please make the corners 30% rounder., Please allow for a bigger corner radius. 
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-video-container-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    max-width: 100%;
    border-radius: {{ block.settings.border_radius }}px;
    overflow: hidden;
    background-color: #000000;
  }

  .ai-video-wrapper-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    height: 0;
    padding-bottom: {{ block.settings.aspect_ratio }}%;
  }

  .ai-video-element-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    border: none;
  }

  .ai-video-controls-{{ ai_gen_id }} {
    position: absolute;
    bottom: 20px;
    right: 20px;
    z-index: 10;
    display: flex;
    gap: 10px;
  }

  .ai-video-button-{{ ai_gen_id }} {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    background-color: rgba(0, 0, 0, 0.7);
    border: none;
    color: #ffffff;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.3s ease, transform 0.2s ease;
    backdrop-filter: blur(4px);
  }

  .ai-video-button-{{ ai_gen_id }}:hover {
    background-color: rgba(0, 0, 0, 0.9);
    transform: scale(1.05);
  }

  .ai-video-button-{{ ai_gen_id }}:focus {
    outline: 2px solid #ffffff;
    outline-offset: 2px;
  }

  .ai-video-button-{{ ai_gen_id }} svg {
    width: 20px;
    height: 20px;
  }

  .ai-video-placeholder-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: #f4f4f4;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    color: #666;
  }

  .ai-video-placeholder-{{ ai_gen_id }} svg {
    width: 80px;
    height: 80px;
    margin-bottom: 16px;
    opacity: 0.5;
  }

  .ai-video-empty-state-{{ ai_gen_id }} {
    font-size: 14px;
    text-align: center;
    max-width: 200px;
  }

  @media screen and (max-width: 749px) {
    .ai-video-controls-{{ ai_gen_id }} {
      bottom: 15px;
      right: 15px;
    }

    .ai-video-button-{{ ai_gen_id }} {
      width: 40px;
      height: 40px;
    }

    .ai-video-button-{{ ai_gen_id }} svg {
      width: 16px;
      height: 16px;
    }
  }
{% endstyle %}

<autoplay-video-{{ ai_gen_id }}
  class="ai-video-container-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-video-wrapper-{{ ai_gen_id }}">
    {% if block.settings.video_url != blank %}
      <video
        class="ai-video-element-{{ ai_gen_id }}"
        autoplay
        muted
        loop
        playsinline
        preload="metadata"
        aria-label="{{ block.settings.video_description | default: 'Autoplay video' | escape }}"
      >
        <source src="{{ block.settings.video_url }}" type="video/mp4">
        Your browser does not support the video tag.
      </video>

      <div class="ai-video-controls-{{ ai_gen_id }}">
        <button
          class="ai-video-button-{{ ai_gen_id }} ai-mute-toggle-{{ ai_gen_id }}"
          aria-label="Toggle sound"
          type="button"
        >
          <svg class="ai-muted-icon-{{ ai_gen_id }}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon>
            <line x1="23" y1="9" x2="17" y2="15"></line>
            <line x1="17" y1="9" x2="23" y2="15"></line>
          </svg>
          <svg class="ai-unmuted-icon-{{ ai_gen_id }}" style="display: none;" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon>
            <path d="M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7.07"></path>
          </svg>
        </button>

        {% if block.settings.show_play_pause %}
          <button
            class="ai-video-button-{{ ai_gen_id }} ai-play-toggle-{{ ai_gen_id }}"
            aria-label="Toggle play/pause"
            type="button"
          >
            <svg class="ai-pause-icon-{{ ai_gen_id }}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <rect x="6" y="4" width="4" height="16"></rect>
              <rect x="14" y="4" width="4" height="16"></rect>
            </svg>
            <svg class="ai-play-icon-{{ ai_gen_id }}" style="display: none;" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <polygon points="5 3 19 12 5 21 5 3"></polygon>
            </svg>
          </button>
        {% endif %}
      </div>
    {% else %}
      <div class="ai-video-placeholder-{{ ai_gen_id }}">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round">
          <polygon points="23 7 16 12 23 17 23 7"></polygon>
          <rect x="1" y="5" width="15" height="14" rx="2" ry="2"></rect>
        </svg>
        <div class="ai-video-empty-state-{{ ai_gen_id }}">
          Add a video URL to get started
        </div>
      </div>
    {% endif %}
  </div>
</autoplay-video-{{ ai_gen_id }}>

<script>
  (function() {
    class AutoplayVideo{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.video = null;
        this.muteToggle = null;
        this.playToggle = null;
        this.mutedIcon = null;
        this.unmutedIcon = null;
        this.playIcon = null;
        this.pauseIcon = null;
      }

      connectedCallback() {
        this.video = this.querySelector('.ai-video-element-{{ ai_gen_id }}');
        this.muteToggle = this.querySelector('.ai-mute-toggle-{{ ai_gen_id }}');
        this.playToggle = this.querySelector('.ai-play-toggle-{{ ai_gen_id }}');
        this.mutedIcon = this.querySelector('.ai-muted-icon-{{ ai_gen_id }}');
        this.unmutedIcon = this.querySelector('.ai-unmuted-icon-{{ ai_gen_id }}');
        this.playIcon = this.querySelector('.ai-play-icon-{{ ai_gen_id }}');
        this.pauseIcon = this.querySelector('.ai-pause-icon-{{ ai_gen_id }}');

        if (!this.video) return;

        this.setupEventListeners();
        this.updateMuteIcon();
        this.updatePlayIcon();
      }

      setupEventListeners() {
        if (this.muteToggle) {
          this.muteToggle.addEventListener('click', () => {
            this.toggleMute();
          });
        }

        if (this.playToggle) {
          this.playToggle.addEventListener('click', () => {
            this.togglePlayPause();
          });
        }

        this.video.addEventListener('play', () => {
          this.updatePlayIcon();
        });

        this.video.addEventListener('pause', () => {
          this.updatePlayIcon();
        });

        this.video.addEventListener('volumechange', () => {
          this.updateMuteIcon();
        });
      }

      toggleMute() {
        if (this.video.muted) {
          this.video.muted = false;
          this.muteToggle.setAttribute('aria-label', 'Mute video');
        } else {
          this.video.muted = true;
          this.muteToggle.setAttribute('aria-label', 'Unmute video');
        }
        this.updateMuteIcon();
      }

      togglePlayPause() {
        if (this.video.paused) {
          this.video.play();
          this.playToggle.setAttribute('aria-label', 'Pause video');
        } else {
          this.video.pause();
          this.playToggle.setAttribute('aria-label', 'Play video');
        }
        this.updatePlayIcon();
      }

      updateMuteIcon() {
        if (!this.mutedIcon || !this.unmutedIcon) return;

        if (this.video.muted) {
          this.mutedIcon.style.display = 'block';
          this.unmutedIcon.style.display = 'none';
        } else {
          this.mutedIcon.style.display = 'none';
          this.unmutedIcon.style.display = 'block';
        }
      }

      updatePlayIcon() {
        if (!this.playIcon || !this.pauseIcon) return;

        if (this.video.paused) {
          this.playIcon.style.display = 'block';
          this.pauseIcon.style.display = 'none';
        } else {
          this.playIcon.style.display = 'none';
          this.pauseIcon.style.display = 'block';
        }
      }
    }

    customElements.define('autoplay-video-{{ ai_gen_id }}', AutoplayVideo{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Autoplay video",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Video"
    },
    {
      "type": "url",
      "id": "video_url",
      "label": "Video URL",
      "info": "Upload your video file to Files in your Shopify admin, then paste the URL here"
    },
    {
      "type": "text",
      "id": "video_description",
      "label": "Video description",
      "info": "Describe the video content for accessibility"
    },
    {
      "type": "select",
      "id": "aspect_ratio",
      "label": "Aspect ratio",
      "options": [
        {
          "value": "56.25",
          "label": "16:9"
        },
        {
          "value": "75",
          "label": "4:3"
        },
        {
          "value": "100",
          "label": "1:1"
        },
        {
          "value": "125",
          "label": "4:5"
        },
        {
          "value": "177.78",
          "label": "9:16"
        }
      ],
      "default": "56.25"
    },
    {
      "type": "header",
      "content": "Controls"
    },
    {
      "type": "checkbox",
      "id": "show_play_pause",
      "label": "Show play/pause button",
      "default": true
    },
    {
      "type": "header",
      "content": "Style"
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Corner radius",
      "default": 25
    }
  ],
  "presets": [
    {
      "name": "Autoplay video"
    }
  ]
}
{% endschema %}