{% doc %}
  @prompt
    A video block that autoplays once you land on the page. It must be muted with the customer having the option to unmute it. It also must fit on the page and do not make the margins bigger., please round the corners of the block 
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-video-block-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    max-width: 100%;
    border-radius: {{ block.settings.border_radius }}px;
    overflow: hidden;
    background-color: {{ block.settings.background_color }};
  }

  .ai-video-wrapper-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    height: 0;
    padding-bottom: {{ block.settings.aspect_ratio }}%;
  }

  .ai-video-element-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: {{ block.settings.border_radius }}px;
  }

  .ai-video-placeholder-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: {{ block.settings.border_radius }}px;
  }

  .ai-video-placeholder-{{ ai_gen_id }} svg {
    width: 100%;
    height: 100%;
    max-width: 200px;
    max-height: 200px;
    opacity: 0.5;
  }

  .ai-video-controls-{{ ai_gen_id }} {
    position: absolute;
    bottom: 20px;
    right: 20px;
    z-index: 10;
  }

  .ai-video-mute-button-{{ ai_gen_id }} {
    background-color: {{ block.settings.control_background_color }};
    color: {{ block.settings.control_icon_color }};
    border: none;
    border-radius: 50%;
    width: {{ block.settings.control_size }}px;
    height: {{ block.settings.control_size }}px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  }

  .ai-video-mute-button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.control_hover_background_color }};
    transform: scale(1.1);
  }

  .ai-video-mute-button-{{ ai_gen_id }} svg {
    width: calc({{ block.settings.control_size }}px * 0.5);
    height: calc({{ block.settings.control_size }}px * 0.5);
  }

  .ai-video-empty-state-{{ ai_gen_id }} {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    padding: 12px 20px;
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    border-radius: 20px;
    font-size: 14px;
    text-align: center;
    pointer-events: none;
  }

  @media screen and (max-width: 749px) {
    .ai-video-controls-{{ ai_gen_id }} {
      bottom: 15px;
      right: 15px;
    }

    .ai-video-mute-button-{{ ai_gen_id }} {
      width: calc({{ block.settings.control_size }}px * 0.8);
      height: calc({{ block.settings.control_size }}px * 0.8);
    }

    .ai-video-mute-button-{{ ai_gen_id }} svg {
      width: calc({{ block.settings.control_size }}px * 0.4);
      height: calc({{ block.settings.control_size }}px * 0.4);
    }
  }
{% endstyle %}

<autoplay-video-{{ ai_gen_id }}
  class="ai-video-block-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-video-wrapper-{{ ai_gen_id }}">
    {% if block.settings.video_url != blank %}
      <video
        class="ai-video-element-{{ ai_gen_id }}"
        autoplay
        muted
        loop
        playsinline
        preload="metadata"
        data-video-id="{{ ai_gen_id }}"
      >
        <source src="{{ block.settings.video_url }}" type="video/mp4">
        Your browser does not support the video tag.
      </video>

      <div class="ai-video-controls-{{ ai_gen_id }}">
        <button
          class="ai-video-mute-button-{{ ai_gen_id }}"
          aria-label="Toggle sound"
          data-mute-button="{{ ai_gen_id }}"
        >
          <svg
            class="ai-video-muted-icon-{{ ai_gen_id }}"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon>
            <line x1="23" y1="9" x2="17" y2="15"></line>
            <line x1="17" y1="9" x2="23" y2="15"></line>
          </svg>
          <svg
            class="ai-video-unmuted-icon-{{ ai_gen_id }}"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            style="display: none;"
          >
            <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon>
            <path d="M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7.07"></path>
          </svg>
        </button>
      </div>
    {% else %}
      <div class="ai-video-placeholder-{{ ai_gen_id }}">
        {{ 'image' | placeholder_svg_tag }}
        <div class="ai-video-empty-state-{{ ai_gen_id }}">
          Add a video URL to get started
        </div>
      </div>
    {% endif %}
  </div>
</autoplay-video-{{ ai_gen_id }}>

<script>
  (function() {
    class AutoplayVideo{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.video = null;
        this.muteButton = null;
        this.mutedIcon = null;
        this.unmutedIcon = null;
        this.isMuted = true;
      }

      connectedCallback() {
        this.video = this.querySelector('[data-video-id="{{ ai_gen_id }}"]');
        this.muteButton = this.querySelector('[data-mute-button="{{ ai_gen_id }}"]');
        this.mutedIcon = this.querySelector('.ai-video-muted-icon-{{ ai_gen_id }}');
        this.unmutedIcon = this.querySelector('.ai-video-unmuted-icon-{{ ai_gen_id }}');

        if (this.video && this.muteButton) {
          this.setupEventListeners();
          this.setupIntersectionObserver();
        }
      }

      setupEventListeners() {
        this.muteButton.addEventListener('click', () => {
          this.toggleMute();
        });

        this.video.addEventListener('loadedmetadata', () => {
          this.video.muted = true;
          this.updateMuteButtonState();
        });
      }

      setupIntersectionObserver() {
        const observer = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              this.video.play().catch(() => {
                console.log('Autoplay was prevented');
              });
            } else {
              this.video.pause();
            }
          });
        }, {
          threshold: 0.5
        });

        observer.observe(this.video);
      }

      toggleMute() {
        this.isMuted = !this.isMuted;
        this.video.muted = this.isMuted;
        this.updateMuteButtonState();
      }

      updateMuteButtonState() {
        if (this.isMuted) {
          this.mutedIcon.style.display = 'block';
          this.unmutedIcon.style.display = 'none';
          this.muteButton.setAttribute('aria-label', 'Unmute video');
        } else {
          this.mutedIcon.style.display = 'none';
          this.unmutedIcon.style.display = 'block';
          this.muteButton.setAttribute('aria-label', 'Mute video');
        }
      }
    }

    customElements.define('autoplay-video-{{ ai_gen_id }}', AutoplayVideo{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Autoplay video",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Video"
    },
    {
      "type": "url",
      "id": "video_url",
      "label": "Video URL"
    },
    {
      "type": "select",
      "id": "aspect_ratio",
      "label": "Aspect ratio",
      "options": [
        {
          "value": "56.25",
          "label": "16:9"
        },
        {
          "value": "75",
          "label": "4:3"
        },
        {
          "value": "100",
          "label": "1:1"
        },
        {
          "value": "125",
          "label": "4:5"
        },
        {
          "value": "177.78",
          "label": "9:16"
        }
      ],
      "default": "56.25"
    },
    {
      "type": "header",
      "content": "Style"
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 16
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#000000"
    },
    {
      "type": "header",
      "content": "Controls"
    },
    {
      "type": "range",
      "id": "control_size",
      "min": 30,
      "max": 60,
      "step": 2,
      "unit": "px",
      "label": "Control button size",
      "default": 44
    },
    {
      "type": "color",
      "id": "control_background_color",
      "label": "Control background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "control_hover_background_color",
      "label": "Control hover background color",
      "default": "#f0f0f0"
    },
    {
      "type": "color",
      "id": "control_icon_color",
      "label": "Control icon color",
      "default": "#000000"
    }
  ],
  "presets": [
    {
      "name": "Autoplay video"
    }
  ]
}
{% endschema %}