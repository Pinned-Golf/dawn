{% doc %}
  @prompt
    A video block that autoplays once you land on the page. It must be muted with the customer having the option to unmute it. It also must fit on the page and do not make the margins bigger please round the corners of the block.
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-video-block-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    max-width: 100%;
    border-radius: {{ block.settings.border_radius }}px;
    overflow: hidden;
    background-color: #000000;
  }

  .ai-video-wrapper-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    height: 0;
    padding-bottom: {{ block.settings.aspect_ratio }}%;
  }

  .ai-video-element-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: {{ block.settings.border_radius }}px;
  }

  .ai-video-placeholder-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: {{ block.settings.border_radius }}px;
  }

  .ai-video-placeholder-{{ ai_gen_id }} svg {
    width: 100px;
    height: 100px;
    opacity: 0.5;
  }

  .ai-video-controls-{{ ai_gen_id }} {
    position: absolute;
    bottom: 20px;
    right: 20px;
    z-index: 10;
  }

  .ai-mute-button-{{ ai_gen_id }} {
    background-color: rgba(0, 0, 0, 0.7);
    border: none;
    border-radius: 50%;
    width: 48px;
    height: 48px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    color: #ffffff;
    transition: background-color 0.3s ease, transform 0.2s ease;
  }

  .ai-mute-button-{{ ai_gen_id }}:hover {
    background-color: rgba(0, 0, 0, 0.9);
    transform: scale(1.1);
  }

  .ai-mute-button-{{ ai_gen_id }}:focus {
    outline: 2px solid #ffffff;
    outline-offset: 2px;
  }

  .ai-mute-button-{{ ai_gen_id }} svg {
    width: 24px;
    height: 24px;
  }

  .ai-video-empty-state-{{ ai_gen_id }} {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    padding: 12px 20px;
    background-color: rgba(0, 0, 0, 0.7);
    color: #ffffff;
    border-radius: 20px;
    font-size: 14px;
    text-align: center;
    pointer-events: none;
  }

  @media screen and (max-width: 749px) {
    .ai-video-controls-{{ ai_gen_id }} {
      bottom: 15px;
      right: 15px;
    }

    .ai-mute-button-{{ ai_gen_id }} {
      width: 40px;
      height: 40px;
    }

    .ai-mute-button-{{ ai_gen_id }} svg {
      width: 20px;
      height: 20px;
    }
  }
{% endstyle %}

<video-player-{{ ai_gen_id }}
  class="ai-video-block-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-video-wrapper-{{ ai_gen_id }}">
    {% if block.settings.video %}
      <video
        class="ai-video-element-{{ ai_gen_id }}"
        autoplay
        muted
        loop
        playsinline
        preload="metadata"
        aria-label="{{ block.settings.video_description | default: 'Autoplay video' | escape }}"
      >
        <source src="{{ block.settings.video | file_url }}" type="video/mp4">
        Your browser does not support the video tag.
      </video>

      <div class="ai-video-controls-{{ ai_gen_id }}">
        <button
          class="ai-mute-button-{{ ai_gen_id }}"
          aria-label="Toggle sound"
          type="button"
        >
          <svg class="ai-mute-icon-{{ ai_gen_id }}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon>
            <line x1="23" y1="9" x2="17" y2="15"></line>
            <line x1="17" y1="9" x2="23" y2="15"></line>
          </svg>
          <svg class="ai-unmute-icon-{{ ai_gen_id }}" style="display: none;" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon>
            <path d="M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7.07"></path>
          </svg>
        </button>
      </div>
    {% else %}
      <div class="ai-video-placeholder-{{ ai_gen_id }}">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polygon points="5 3 19 12 5 21 5 3"></polygon>
        </svg>
        <div class="ai-video-empty-state-{{ ai_gen_id }}">
          Add a video to get started
        </div>
      </div>
    {% endif %}
  </div>
</video-player-{{ ai_gen_id }}>

<script>
  (function() {
    class VideoPlayer{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.video = null;
        this.muteButton = null;
        this.muteIcon = null;
        this.unmuteIcon = null;
        this.isMuted = true;
      }

      connectedCallback() {
        this.video = this.querySelector('.ai-video-element-{{ ai_gen_id }}');
        this.muteButton = this.querySelector('.ai-mute-button-{{ ai_gen_id }}');
        this.muteIcon = this.querySelector('.ai-mute-icon-{{ ai_gen_id }}');
        this.unmuteIcon = this.querySelector('.ai-unmute-icon-{{ ai_gen_id }}');

        if (this.video && this.muteButton) {
          this.setupEventListeners();
          this.updateMuteButtonState();
        }
      }

      setupEventListeners() {
        this.muteButton.addEventListener('click', () => {
          this.toggleMute();
        });

        this.video.addEventListener('loadedmetadata', () => {
          this.video.muted = true;
          this.isMuted = true;
          this.updateMuteButtonState();
        });

        this.video.addEventListener('volumechange', () => {
          this.isMuted = this.video.muted;
          this.updateMuteButtonState();
        });
      }

      toggleMute() {
        if (this.video) {
          this.video.muted = !this.video.muted;
          this.isMuted = this.video.muted;
          this.updateMuteButtonState();
        }
      }

      updateMuteButtonState() {
        if (this.muteIcon && this.unmuteIcon) {
          if (this.isMuted) {
            this.muteIcon.style.display = 'block';
            this.unmuteIcon.style.display = 'none';
            this.muteButton.setAttribute('aria-label', 'Unmute video');
          } else {
            this.muteIcon.style.display = 'none';
            this.unmuteIcon.style.display = 'block';
            this.muteButton.setAttribute('aria-label', 'Mute video');
          }
        }
      }
    }

    customElements.define('video-player-{{ ai_gen_id }}', VideoPlayer{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Autoplay video",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Video"
    },
    {
      "type": "video",
      "id": "video",
      "label": "Video file"
    },
    {
      "type": "text",
      "id": "video_description",
      "label": "Video description",
      "info": "Describe the video for screen readers"
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "select",
      "id": "aspect_ratio",
      "label": "Aspect ratio",
      "options": [
        {
          "value": "56.25",
          "label": "16:9"
        },
        {
          "value": "75",
          "label": "4:3"
        },
        {
          "value": "100",
          "label": "1:1"
        },
        {
          "value": "125",
          "label": "4:5"
        },
        {
          "value": "177.78",
          "label": "9:16"
        }
      ],
      "default": "56.25"
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Corner radius",
      "default": 16
    }
  ],
  "presets": [
    {
      "name": "Autoplay video"
    }
  ]
}
{% endschema %}