{% doc %}
  @prompt
    A video block that autoplays once you land on the page. It must be muted with the customer having the option to unmute it. It also must fit on the page and do not make the margins bigger. make there be a 6px boarder on each side of the video and make the corners round and make the block height bigger by 25%
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-video-container-{{ ai_gen_id }} {
    width: 100%;
    height: calc(100vh * 1.25);
    padding: 6px;
    box-sizing: border-box;
  }

  .ai-video-wrapper-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    height: 100%;
    border-radius: {{ block.settings.border_radius }}px;
    overflow: hidden;
    background-color: #000;
  }

  .ai-video-element-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }

  .ai-video-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  .ai-video-placeholder-{{ ai_gen_id }} svg {
    width: 100%;
    height: 100%;
    max-width: 200px;
    max-height: 200px;
    opacity: 0.5;
  }

  .ai-video-empty-state-{{ ai_gen_id }} {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    padding: 12px 20px;
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    border-radius: 6px;
    font-size: 14px;
    text-align: center;
    pointer-events: none;
  }

  .ai-video-controls-{{ ai_gen_id }} {
    position: absolute;
    bottom: 20px;
    right: 20px;
    display: flex;
    gap: 10px;
    z-index: 10;
  }

  .ai-video-control-btn-{{ ai_gen_id }} {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    background-color: rgba(0, 0, 0, 0.7);
    border: none;
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.3s ease;
  }

  .ai-video-control-btn-{{ ai_gen_id }}:hover {
    background-color: rgba(0, 0, 0, 0.9);
  }

  .ai-video-control-btn-{{ ai_gen_id }} svg {
    width: 20px;
    height: 20px;
  }

  .ai-video-overlay-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      135deg,
      {{ block.settings.overlay_color_1 | color_modify: 'alpha', block.settings.overlay_opacity_1 }},
      {{ block.settings.overlay_color_2 | color_modify: 'alpha', block.settings.overlay_opacity_2 }}
    );
    pointer-events: none;
    z-index: 1;
  }

  .ai-video-content-{{ ai_gen_id }} {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
    z-index: 5;
    color: {{ block.settings.text_color }};
    max-width: 90%;
  }

  .ai-video-title-{{ ai_gen_id }} {
    font-size: {{ block.settings.title_size }}px;
    font-weight: 600;
    margin: 0 0 16px;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
  }

  .ai-video-subtitle-{{ ai_gen_id }} {
    font-size: {{ block.settings.subtitle_size }}px;
    margin: 0;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
  }

  @media screen and (max-width: 749px) {
    .ai-video-container-{{ ai_gen_id }} {
      height: calc(100vh * 1.25);
    }

    .ai-video-title-{{ ai_gen_id }} {
      font-size: calc({{ block.settings.title_size }}px * 0.8);
    }

    .ai-video-subtitle-{{ ai_gen_id }} {
      font-size: calc({{ block.settings.subtitle_size }}px * 0.8);
    }

    .ai-video-controls-{{ ai_gen_id }} {
      bottom: 15px;
      right: 15px;
    }

    .ai-video-control-btn-{{ ai_gen_id }} {
      width: 40px;
      height: 40px;
    }

    .ai-video-control-btn-{{ ai_gen_id }} svg {
      width: 16px;
      height: 16px;
    }
  }
{% endstyle %}

<autoplay-video-{{ ai_gen_id }}
  class="ai-video-container-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-video-wrapper-{{ ai_gen_id }}">
    {% if block.settings.video_file %}
      <video
        class="ai-video-element-{{ ai_gen_id }}"
        autoplay
        muted
        loop
        playsinline
        preload="metadata"
        data-video-id="{{ ai_gen_id }}"
      >
        <source src="{{ block.settings.video_file }}" type="video/mp4">
        Your browser does not support the video tag.
      </video>

      {% if block.settings.show_overlay %}
        <div class="ai-video-overlay-{{ ai_gen_id }}"></div>
      {% endif %}

      {% if block.settings.title != blank or block.settings.subtitle != blank %}
        <div class="ai-video-content-{{ ai_gen_id }}">
          {% if block.settings.title != blank %}
            <h2 class="ai-video-title-{{ ai_gen_id }}">{{ block.settings.title }}</h2>
          {% endif %}
          {% if block.settings.subtitle != blank %}
            <p class="ai-video-subtitle-{{ ai_gen_id }}">{{ block.settings.subtitle }}</p>
          {% endif %}
        </div>
      {% endif %}

      <div class="ai-video-controls-{{ ai_gen_id }}">
        <button
          class="ai-video-control-btn-{{ ai_gen_id }} ai-mute-btn-{{ ai_gen_id }}"
          aria-label="Toggle mute"
          data-muted="true"
        >
          <svg class="ai-muted-icon-{{ ai_gen_id }}" viewBox="0 0 24 24" fill="currentColor">
            <path d="M16.5 12c0-1.77-1.02-3.29-2.5-4.03v2.21l2.45 2.45c.03-.2.05-.41.05-.63zm2.5 0c0 .94-.2 1.82-.54 2.64l1.51 1.51C20.63 14.91 21 13.5 21 12c0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zM4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25c-.67.52-1.42.93-2.25 1.18v2.06c1.38-.31 2.63-.95 3.69-1.81L19.73 21 21 19.73l-9-9L4.27 3zM12 4L9.91 6.09 12 8.18V4z"/>
          </svg>
          <svg class="ai-unmuted-icon-{{ ai_gen_id }}" viewBox="0 0 24 24" fill="currentColor" style="display: none;">
            <path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z"/>
          </svg>
        </button>

        <button
          class="ai-video-control-btn-{{ ai_gen_id }} ai-play-pause-btn-{{ ai_gen_id }}"
          aria-label="Play/Pause"
          data-playing="true"
        >
          <svg class="ai-pause-icon-{{ ai_gen_id }}" viewBox="0 0 24 24" fill="currentColor">
            <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/>
          </svg>
          <svg class="ai-play-icon-{{ ai_gen_id }}" viewBox="0 0 24 24" fill="currentColor" style="display: none;">
            <path d="M8 5v14l11-7z"/>
          </svg>
        </button>
      </div>
    {% else %}
      <div class="ai-video-placeholder-{{ ai_gen_id }}">
        {{ 'image' | placeholder_svg_tag }}
        <div class="ai-video-empty-state-{{ ai_gen_id }}">
          Add a video file to get started
        </div>
      </div>
    {% endif %}
  </div>
</autoplay-video-{{ ai_gen_id }}>

<script>
  (function() {
    class AutoplayVideo{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.video = null;
        this.muteBtn = null;
        this.playPauseBtn = null;
        this.mutedIcon = null;
        this.unmutedIcon = null;
        this.playIcon = null;
        this.pauseIcon = null;
      }

      connectedCallback() {
        this.video = this.querySelector('.ai-video-element-{{ ai_gen_id }}');
        this.muteBtn = this.querySelector('.ai-mute-btn-{{ ai_gen_id }}');
        this.playPauseBtn = this.querySelector('.ai-play-pause-btn-{{ ai_gen_id }}');
        this.mutedIcon = this.querySelector('.ai-muted-icon-{{ ai_gen_id }}');
        this.unmutedIcon = this.querySelector('.ai-unmuted-icon-{{ ai_gen_id }}');
        this.playIcon = this.querySelector('.ai-play-icon-{{ ai_gen_id }}');
        this.pauseIcon = this.querySelector('.ai-pause-icon-{{ ai_gen_id }}');

        if (!this.video) return;

        this.setupEventListeners();
        this.handleAutoplay();
      }

      setupEventListeners() {
        if (this.muteBtn) {
          this.muteBtn.addEventListener('click', () => this.toggleMute());
        }

        if (this.playPauseBtn) {
          this.playPauseBtn.addEventListener('click', () => this.togglePlayPause());
        }

        this.video.addEventListener('loadeddata', () => {
          this.video.muted = true;
          this.updateMuteButton();
        });

        this.video.addEventListener('play', () => {
          this.updatePlayPauseButton(true);
        });

        this.video.addEventListener('pause', () => {
          this.updatePlayPauseButton(false);
        });
      }

      handleAutoplay() {
        const playPromise = this.video.play();
        
        if (playPromise !== undefined) {
          playPromise.catch(() => {
            console.log('Autoplay was prevented');
          });
        }
      }

      toggleMute() {
        if (!this.video) return;
        
        this.video.muted = !this.video.muted;
        this.updateMuteButton();
      }

      togglePlayPause() {
        if (!this.video) return;
        
        if (this.video.paused) {
          this.video.play();
        } else {
          this.video.pause();
        }
      }

      updateMuteButton() {
        if (!this.muteBtn) return;
        
        const isMuted = this.video.muted;
        this.muteBtn.setAttribute('data-muted', isMuted);
        
        if (this.mutedIcon && this.unmutedIcon) {
          this.mutedIcon.style.display = isMuted ? 'block' : 'none';
          this.unmutedIcon.style.display = isMuted ? 'none' : 'block';
        }
      }

      updatePlayPauseButton(isPlaying) {
        if (!this.playPauseBtn) return;
        
        this.playPauseBtn.setAttribute('data-playing', isPlaying);
        
        if (this.playIcon && this.pauseIcon) {
          this.playIcon.style.display = isPlaying ? 'none' : 'block';
          this.pauseIcon.style.display = isPlaying ? 'block' : 'none';
        }
      }
    }

    customElements.define('autoplay-video-{{ ai_gen_id }}', AutoplayVideo{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Autoplay video",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Video"
    },
    {
      "type": "video",
      "id": "video_file",
      "label": "Video file"
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 50,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 16
    },
    {
      "type": "header",
      "content": "Overlay"
    },
    {
      "type": "checkbox",
      "id": "show_overlay",
      "label": "Show overlay",
      "default": true
    },
    {
      "type": "color",
      "id": "overlay_color_1",
      "label": "Overlay color 1",
      "default": "#000000"
    },
    {
      "type": "range",
      "id": "overlay_opacity_1",
      "min": 0,
      "max": 1,
      "step": 0.1,
      "label": "Overlay opacity 1",
      "default": 0.3
    },
    {
      "type": "color",
      "id": "overlay_color_2",
      "label": "Overlay color 2",
      "default": "#000000"
    },
    {
      "type": "range",
      "id": "overlay_opacity_2",
      "min": 0,
      "max": 1,
      "step": 0.1,
      "label": "Overlay opacity 2",
      "default": 0.1
    },
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Title"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 20,
      "max": 80,
      "step": 2,
      "unit": "px",
      "label": "Title size",
      "default": 48
    },
    {
      "type": "text",
      "id": "subtitle",
      "label": "Subtitle"
    },
    {
      "type": "range",
      "id": "subtitle_size",
      "min": 12,
      "max": 32,
      "step": 2,
      "unit": "px",
      "label": "Subtitle size",
      "default": 18
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#ffffff"
    }
  ],
  "presets": [
    {
      "name": "Autoplay video"
    }
  ]
}
{% endschema %}